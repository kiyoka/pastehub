#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#
# PastehubSync - PasteHub's sync program for UNIX client.
#  
#   Copyright (c) 2009-2011  Kiyoka Nishiyama  <kiyoka@sumibi.org>
#   
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#   
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#  
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#  
#   3. Neither the name of the authors nor the names of its contributors
#      may be used to endorse or promote products derived from this
#      software without specific prior written permission.
#  
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
#
require 'thread'
require 'pastehub'

PasteHub::Config.instance.loadClient
RETRY_INTERVAL = 60


def setup( argv )
  if not PasteHub.setupDirectory( )
    exit( 1 )
  end

  if 0 < argv.size
    case argv[0]
    when "batch"
      # batch (server) mode
      password = STDIN.readline.chomp
      return PasteHub.signInWithPassword( password )
    when "auth"
      password = STDIN.readline.chomp
      arr = PasteHub.signInWithPassword( password )
      if :ok == arr[0]
        puts "OK"
        exit( 0 )
      else
        puts "NG"
        exit( 1 )
      end
    when "saveauth"
      begin
        password  = STDIN.readline.chomp
        username  = STDIN.readline.chomp      
        signature = STDIN.readline.chomp      
        arr = PasteHub.signInWithPassword( password, username, signature )
        if :ok == arr[0]
          puts "OK"
          exit( 0 )
        else
          puts "NG"
          exit( 1 )
        end
      rescue EOFError
        exit( 1 )
      end
    else
      exit( 1 )
    end
  end
  # console interactive mode
  return PasteHub.signIn()
end


def main( argv )
  ret = setup( argv )
  errorCode = ret[0]
  username  = ret[1]
  secretKey = ret[2]
  password  = ret[3]

  if not :ok == errorCode
    exit( 1 )
  end

  # save pid file
  PasteHub.savePid( Process.pid )

  # create clientSync
  clientSync = PasteHub::ClientSync.new(
                                    PasteHub::Config.instance.listItems / 2,
                                    PasteHub::Config.instance.localDbPath,
                                    0.5 )
  
  clientSync.addNoitfyCallback( 
                               lambda { puts '<< COUNTUP >>' },
                               lambda { puts '<< ONLINE >>'  },
                               lambda { puts '<< offline >>' }
                               )

  while true
    begin
      signals = 0

      if PasteHub.isWin32
        # Windows
      else
        # Other
        Signal.trap( :SIGUSR1 ) {
          STDERR.puts( "Info: caught USR1 signal." )
          signals += 1
        }
        Signal.trap( :SIGTERM ) {
          STDERR.puts( "Info: caught TERM signal to terminate." )
          exit( 0 )
        }
      end

      if username
        threads = []
#        threads.push(Thread.new { clientSync.statusServer( )
#                                  STDERR.puts( "Info: disconnected from client process." )
#                                  exit( 1 ) })
        threads.push(Thread.new { clientSync.syncMain(       username, secretKey, password ) })
        threads.push(Thread.new { clientSync.clipboardCheck( username, secretKey, password ) })
        threads.push(Thread.new {
                       while true
                         sleep 0.5
                         if 0 < signals
                           clientSync.syncNow( username, secretKey, password )
                           signals -= 1
                         end
                       end
                     })
        threads.push(Thread.new { clientSync.syncStatus( ) })
        threads.each {|t| t.join}
      end

    rescue Errno::ECONNREFUSED => e
      STDERR.puts "retrying... pastehub server is down(1)"
      sleep RETRY_INTERVAL
    rescue Errno::ETIMEDOUT => e
      STDERR.puts "retrying... network is offline(1)"
      sleep RETRY_INTERVAL
    rescue SocketError => e
      STDERR.puts "retrying... network is offline(2)"
      sleep RETRY_INTERVAL
    rescue Timeout::Error => e
      # ONLINE, but server is not helthy
      STDERR.puts "retrying... pastehub server is down(2)"
      sleep RETRY_INTERVAL
    rescue Errno::ECONNRESET => e
      STDERR.puts "retrying... pastehub server is down(3)"
      sleep RETRY_INTERVAL
    end
  end
end

main( ARGV )
